// Generated by CoffeeScript 1.9.1
var displayError, itemModalInfo, refreshGatherItems, refreshProfitableItems, refreshStaleItems;

itemModalInfo = {};

displayError = function(err) {
  var alertBubble;
  alertBubble = document.getElementById("errorAlert");
  return alertBubble.innerHTML = '<div class="alert alert-danger fade in">' + '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>' + err + '</div>';
};

refreshGatherItems = function(interval) {
  var gatherItemTable;
  gatherItemTable = document.getElementById("gatherItemBody");
  if (gatherItemTable === null) {
    return;
  }
  if (!interval) {
    setTimeout(refreshGatherItems, 5000);
  }
  return $.get("/ffxivmc/gatherorders", function(data) {
    var displayList, table;
    if (data.length < 0) {
      return displayError("Could not retrieve item information");
    }
    displayList = data.slice(0, 100);
    table = "";
    displayList.forEach(function(item) {
      var showInfo;
      table += "<tr>";
      table += "<td>" + item.name + "</td>";
      table += "<td>" + item.market_sell_price + "</td>";
      table += "<td>" + item.gather_class + "</td>";
      table += "<td>" + item.level + "</td>";
      table += "<td>" + item.stars + "</td>";
      showInfo = function() {
        var itemModal;
        itemModal = "<div>";
        itemModal += '<p>Node Locations</p>';
        itemModal += '<table class="table table-condensed table-striped">';
        itemModal += '<thead>';
        itemModal += '<tr>';
        itemModal += '<th>Zone</th>';
        itemModal += '<th>Area</th>';
        itemModal += '<th>Level</th>';
        itemModal += '</tr>';
        itemModal += '</thead>';
        itemModal += '<tbody>';
        item.location.forEach(function(loc) {
          itemModal += "<tr>";
          itemModal += "<td>" + loc.zone + "</td>";
          itemModal += "<td>" + loc.area + "</td>";
          itemModal += "<td>" + loc.level + "</td>";
          return itemModal += "</tr>";
        });
        itemModal += '</tbody>';
        itemModal += '</table>';
        itemModal += '</div>';
        document.getElementById("itemModalTitle").innerHTML = item.name;
        return document.getElementById("itemModalBody").innerHTML = itemModal;
      };
      itemModalInfo[item.name] = showInfo;
      table += '<td><button type="button" class="btn btn-info" data-toggle="modal" data-target="#itemModal" onclick="itemModalInfo[\'' + item.name + '\']()">Info</button></td>';
      return table += "</tr>";
    });
    return gatherItemTable.innerHTML = table;
  });
};

refreshStaleItems = function(interval) {
  var staleItemTable;
  staleItemTable = document.getElementById("staleItemBody");
  if (staleItemTable === null) {
    return;
  }
  if (!interval) {
    setTimeout(refreshStaleItems, 5000);
  }
  return $.get("/ffxivmc/desiredorders", function(data) {
    var displayList, staleCounter, table;
    staleCounter = document.getElementById("staleItemCounter");
    if (data.length < 0) {
      return displayError("Could not retrieve item information");
    }
    displayList = data.slice(0, 400);
    table = "";
    displayList.forEach(function(item) {
      return table += "<tr><td>" + item + "</td></tr>";
    });
    staleItemTable.innerHTML = table;
    return staleCounter.innerHTML = data.length;
  });
};

refreshProfitableItems = function(interval) {
  var profitItemTable;
  profitItemTable = document.getElementById("ProfitableItemBody");
  if (profitItemTable === null) {
    return;
  }
  if (!interval) {
    setTimeout(refreshProfitableItems, 5000);
  }
  return $.get("/ffxivmc/bestcrafts", function(data) {
    var displayList, table;
    if (data.length === 0) {
      return displayError("Item crafting prices are being generated, please wait.");
    }
    displayList = data;
    table = "";
    displayList.forEach(function(item) {
      var showInfo;
      table += "<tr>";
      table += "<td>" + item.name + "</td>";
      table += "<td>" + (100 * item.market_sell_price / item.actual_price.price) + "% </td>";
      table += "<td>" + (item.market_sell_price - item.actual_price.price) + "</td>";
      table += "<td>" + item.market_sell_price + "</td>";
      table += "<td>" + item.actual_price.price + "</td>";
      table += "<td>" + item.actual_price.source + "</td>";
      showInfo = function() {
        var itemModal;
        console.log("show Info clicked");
        itemModal = "<div>";
        itemModal += '<p>Source: ' + item.actual_price.source + '</p>';
        itemModal += '<p>Individual Price: ' + item.actual_price.price + '</p>';
        itemModal += '<p>Last known price on market: ' + item.market_sell_price + '</p>';
        itemModal += '<h2>Materials Required:</h2>';
        itemModal += '<table class="table table-condensed table-striped">';
        itemModal += '<thead>';
        itemModal += '<tr>';
        itemModal += '<th>Item</th>';
        itemModal += '<th>Quantity</th>';
        itemModal += '<th>Best Source</th>';
        itemModal += '<th>Price</th>';
        itemModal += '</thead>';
        itemModal += '<tbody>';
        item.mats.forEach(function(mat) {
          itemModal += "<tr>";
          itemModal += "<td>" + mat.name + "</td>";
          itemModal += "<td>" + mat.quantity + "</td>";
          itemModal += "<td>" + mat.actual_price.source + "</td>";
          itemModal += "<td>" + mat.actual_price.price + "</td>";
          return itemModal += "</tr>";
        });
        itemModal += '</body>';
        itemModal += '</table>';
        itemModal += "</div>";
        document.getElementById("itemModalTitle").innerHTML = item.name;
        return document.getElementById("itemModalBody").innerHTML = itemModal;
      };
      itemModalInfo[item.name] = showInfo;
      table += '<td><button type="button" class="btn btn-info" data-toggle="modal" data-target="#itemModal" onclick="itemModalInfo[\'' + item.name + '\']()">Info</button></td>';
      return table += "</tr>";
    });
    return profitItemTable.innerHTML = table;
  });
};

window.onload = function() {
  refreshStaleItems();
  refreshProfitableItems();
  return refreshGatherItems();
};
