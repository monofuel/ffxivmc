// Generated by CoffeeScript 1.9.1
var Gather, Item, ItemList, Recipe, cheerio, db, fs, get_item_id, get_item_name, headers, itemIds, mongoose, process_gather, request, scrape_loop;

mongoose = require('mongoose');

request = require('request');

cheerio = require('cheerio');

fs = require('fs');

require('./models/Item');

Gather = mongoose.model('Gather');

Recipe = mongoose.model('Recipe');

Item = mongoose.model('Item');

mongoose.connect('mongodb://localhost/ffxivmc');

db = mongoose.connection;

console.log('connected to db');

itemIds = new Array();

headers = {
  'user-agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36' + ' (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'
};

ItemList = new Array();

get_item_id = function(name) {
  var item, j, len;
  for (j = 0, len = itemIds.length; j < len; j++) {
    item = itemIds[j];
    if (item.name === name) {
      return item.id;
    }
  }
  console.log("item not found: " + name);
  return "";
};

get_item_name = function(id) {
  var item, j, len;
  for (j = 0, len = itemIds.length; j < len; j++) {
    item = itemIds[j];
    if (item.id === id) {
      return item.name;
    }
  }
  console.log("item not found: " + id);
  return "";
};

scrape_loop = function(i) {
  if (i > 11) {
    return;
  }
  console.log("page " + i);
  return setTimeout(function() {
    var url;
    url = "http://na.finalfantasyxiv.com/lodestone/playguide/db/gathering/?page=" + i;
    request({
      url: url,
      headers: headers
    }, function(error, response, html) {
      var $;
      if (!error && response.statusCode === 200) {
        $ = cheerio.load(html);
        return $(" tr .col_left .ic_link_txt a").each(function(index, element) {
          var link;
          link = $(element).attr("href");
          if (link.indexOf("category") !== -1) {
            return;
          }
          return process_gather(link);
        });
      }
    });
    return scrape_loop(i + 1);
  }, 1000);
};

process_gather = function(url) {
  console.log("http://na.finalfantasyxiv.com" + url);
  return request({
    url: "http://na.finalfantasyxiv.com" + url,
    headers: headers
  }, function(error, response, html) {
    var $, gather, item_name;
    if (!error && response.statusCode === 200) {
      gather = {};
      $ = cheerio.load(html);
      item_name = $(".clearfix h2").eq(0).text().trim();
      gather.level = parseInt($(".star_level span").text().trim());
      gather.gather_class = $(".clearfix .job_name").text().trim();
      gather.id = get_item_id(item_name);
      gather.locations = new Array();
      $(".even .gathering_data").each(function(index, element) {
        var areaLine, loc;
        loc = {};
        loc.x = 0;
        loc.y = 0;
        loc.zone = $(element).find("dt").text().trim();
        areaLine = $(element).find("dd").text().trim().split("\t");
        loc.area = areaLine[areaLine.length - 1];
        areaLine.forEach(function(text) {
          if (text.indexOf("Lv. ") !== -1) {
            return loc.level = parseInt(text.split(" ")[1]);
          }
        });
        gather.stars = $(".star_level .ic_star_01").length;
        return gather.locations.push(loc);
      });
      gather.lodestone_code = url.split("/")[5];
      console.log(JSON.stringify(gather));
      return Gather.findOne({
        id: gather.id
      }, function(err, item) {
        var NewGather;
        if (item === void 0 || item === null) {
          NewGather = new Gather(gather);
          NewGather.save(function(err, doc) {
            if (err) {
              return console.log(err);
            }
          });
          return;
        }
        console.log("appending locations to existing item");
        gather.locations.forEach(function(loc) {
          if (item.locations.indexOf(loc) === -1) {
            return item.locations.push(loc);
          }
        });
        return item.save();
      });
    }
  });
};

Item.find(function(err, items) {
  var item, j, len;
  if (err) {
    console.log(err);
    return next(err);
  }
  for (j = 0, len = items.length; j < len; j++) {
    item = items[j];
    itemIds.push({
      id: item.id,
      name: item.name
    });
  }
  return scrape_loop(1);
});
